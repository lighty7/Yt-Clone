name: Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test the application
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      status: success
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Backend setup and test
      - name: Cache Backend Dependencies
        uses: actions/cache@v4
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-node-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-node-

      - name: Install Backend Dependencies
        working-directory: backend
        run: npm ci

      - name: Generate Prisma Client
        working-directory: backend
        run: npx prisma generate

      - name: Run Backend Tests
        working-directory: backend
        run: |
          if npm run | grep -q "test"; then
            npm test
          else
            echo "No test script found, skipping tests"
          fi

      # Frontend setup and test
      - name: Cache Frontend Dependencies
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-node-

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm ci

      - name: Build Frontend
        working-directory: frontend
        run: npm run build
        env:
          CI: false
          NODE_ENV: production
          VITE_API_URL: ${{ secrets.PRODUCTION_API_URL || 'http://localhost:3000' }}

      - name: Run Frontend Tests
        working-directory: frontend
        run: |
          if npm run | grep -q "test"; then
            npm test
          else
            echo "No test script found, skipping tests"
          fi

      # Docker build skipped - using Vercel for frontend deployment
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      # - name: Log in to Container Registry
      #   uses: docker/login-action@v3
      # - name: Extract metadata
      #   id: meta
      #   uses: docker/metadata-action@v5
      # - name: Build and push Docker image
      #   id: build
      #   uses: docker/build-push-action@v5

      - name: Build completed successfully
        run: echo "Build completed - Frontend will be deployed to Vercel, Backend to Render"

  # Database migration job
  database-migration:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Backend Dependencies
        uses: actions/cache@v4
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-node-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-node-

      - name: Install Backend Dependencies
        working-directory: backend
        run: npm ci

      - name: Run Database Migrations
        working-directory: backend
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, database-migration]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy to Production
        run: |
          echo "ðŸš€ Deploying to production..."
          echo "Status: ${{ needs.build-and-test.outputs.status }}"
          echo "Environment: production"
          echo "Frontend: Deployed to Vercel"
          echo "Backend: Deployed to Render"
          
          # Add your deployment commands here
          # Examples for different platforms:
          
          # For Railway
          # - name: Deploy to Railway
          #   uses: railway-app/railway-deploy@v1
          #   with:
          #     railway-token: ${{ secrets.RAILWAY_TOKEN }}
          #     service: ${{ secrets.RAILWAY_SERVICE_ID }}
          
          # For Heroku
          # - name: Deploy to Heroku
          #   uses: akhileshns/heroku-deploy@v3.12.12
          #   with:
          #     heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          #     heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          #     heroku_email: ${{ secrets.HEROKU_EMAIL }}
          
          # For DigitalOcean App Platform
          # - name: Deploy to DigitalOcean
          #   uses: digitalocean/app_action@v1
          #   with:
          #     app_id: ${{ secrets.DO_APP_ID }}
          #     token: ${{ secrets.DO_API_TOKEN }}
          
          # For AWS ECS
          # - name: Deploy to AWS ECS
          #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          #   with:
          #     task-definition: ${{ secrets.ECS_TASK_DEFINITION }}
          #     service: ${{ secrets.ECS_SERVICE }}
          #     cluster: ${{ secrets.ECS_CLUSTER }}
          #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          #     aws-region: ${{ secrets.AWS_REGION }}

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref != 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Deploy to Staging
        run: |
          echo "ðŸš€ Deploying to staging..."
          echo "Status: ${{ needs.build-and-test.outputs.status }}"
          echo "Environment: staging"
          echo "Frontend: Deployed to Vercel"
          echo "Backend: Deployed to Render"
          
          # Add your staging deployment commands here
